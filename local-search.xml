<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>电控平移台调研</title>
    <link href="/2022/10/31/%E7%94%B5%E6%8E%A7%E5%B9%B3%E7%A7%BB%E5%8F%B0%E8%B0%83%E7%A0%94/"/>
    <url>/2022/10/31/%E7%94%B5%E6%8E%A7%E5%B9%B3%E7%A7%BB%E5%8F%B0%E8%B0%83%E7%A0%94/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="0fd6756c392b1eb317459efe987b703ee122adeeb1bf95373ab63f29773a3597"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>调研</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux添加磁盘</title>
    <link href="/2022/10/11/Linux%E6%B7%BB%E5%8A%A0%E7%A3%81%E7%9B%98/"/>
    <url>/2022/10/11/Linux%E6%B7%BB%E5%8A%A0%E7%A3%81%E7%9B%98/</url>
    
    <content type="html"><![CDATA[<h2 id="🐻-查看"><a href="#🐻-查看" class="headerlink" title="🐻 查看"></a>🐻 查看</h2><p>服务器上插入新磁盘后，使用如下命令查看分区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lsblk<br></code></pre></td></tr></table></figure><img src="20221011162938.png" alt="查看" style="zoom:80%;" /><p>sdc是新加入的磁盘，大小为1.8T</p><h2 id="🐼-分区"><a href="#🐼-分区" class="headerlink" title="🐼 分区"></a>🐼 分区</h2><p>输入如下所示的命令，标红处若无字母则直接回车（直接回车是采用默认值）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">fdisk /dev/sdc<br></code></pre></td></tr></table></figure><img src="20221011164001.png" alt="分区" style="zoom:90%;" /><h2 id="🐬-格式化"><a href="#🐬-格式化" class="headerlink" title="🐬 格式化"></a>🐬 格式化</h2><p>用如下命令再次查看分区情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lsblk -f<br></code></pre></td></tr></table></figure><img src="20221011164441.png" alt="格式化" style="zoom:90%;" /><p>此时还没有UUID（看作Linux为磁盘分区创办的身份证）</p><p>因此用如下指令对磁盘进行格式化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkfs -t ext4 /dev/sdc1<br></code></pre></td></tr></table></figure><img src="20221011164657.png" alt="格式化" style="zoom:90%;" /><p>再次查看分区，此时有了UUID</p><img src="20221011164828.png" alt="格式化" style="zoom:90%;" /><h2 id="🐈-挂载"><a href="#🐈-挂载" class="headerlink" title="🐈 挂载"></a>🐈 挂载</h2><p>在根目录下创建一个文件夹cvdir2，然后将分区手动挂载到该文件夹下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /cvdir2<br>mount /dev/sdc1 /cvdir2<br></code></pre></td></tr></table></figure><p>使用<font color="\#DAA520">lsblk</font>命令可以看到该磁盘已经挂载上</p><img src="20221011165302.png" alt="挂载" style="zoom:80%;" /><p>在&#x2F;etc&#x2F;fstab中添加挂载信息，以便<font color="\#DAA520">reboot</font>命令重启后Linux系统能够自动挂载该磁盘</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/fstab<br></code></pre></td></tr></table></figure><img src="20221011163558.png" alt="挂载" style="zoom:90%;" />]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS7忘记root密码</title>
    <link href="/2022/10/07/CentOS7%E5%BF%98%E8%AE%B0root%E5%AF%86%E7%A0%81/"/>
    <url>/2022/10/07/CentOS7%E5%BF%98%E8%AE%B0root%E5%AF%86%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h2 id="⚡️-问题"><a href="#⚡️-问题" class="headerlink" title="⚡️ 问题"></a>⚡️ 问题</h2><p>实验室服务器添加磁盘，需要root账号的权限，但root账号密码没人知道，此时需要重置root密码</p><h2 id="🌀-重启CentoOS7"><a href="#🌀-重启CentoOS7" class="headerlink" title="🌀 重启CentoOS7"></a>🌀 重启CentoOS7</h2><p>在服务器真实物理设备上进入重启页面后，选中较短的CentOS行，按e进入编辑模式</p><img src="20210418095522399.png" alt="启动" style="zoom:90%;" /><h2 id="🌴-进入编辑模式"><a href="#🌴-进入编辑模式" class="headerlink" title="🌴 进入编辑模式"></a>🌴 进入编辑模式</h2><p>找到ro crashkernel…项，将ro改成<font color="\#DAA520">rw init&#x3D;&#x2F;sysroot&#x2F;bin&#x2F;sh</font></p><img src="20210418095835674.png" alt="编辑" style="zoom:90%;" /><p>修改后</p><img src="20210418095952459.png" alt="编辑后" style="zoom:90%;" /><h2 id="🐸-单用户模式重置码"><a href="#🐸-单用户模式重置码" class="headerlink" title="🐸 单用户模式重置码"></a>🐸 单用户模式重置码</h2><p>按ctrl+x进入单用户模式</p><p>执行命令<font color="\#DAA520">chroot &#x2F;sysroot</font>访问系统，并使用passwd修改root密码</p><img src="2021041810014129.png" alt="修改密码" style="zoom:90%;" /><p>输入两次密码，当出现successfully的时候说明重置成功</p><h2 id="🐯-更新系统信息"><a href="#🐯-更新系统信息" class="headerlink" title="🐯 更新系统信息"></a>🐯 更新系统信息</h2><p>执行命令<font color="\#DAA520">touch &#x2F;.autorelabel</font>，在&#x2F;目录下创建一个.autorelabel文件，如果该文件存在，系统在重启时就会对整个文件系统进行relabeling重新标记 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">:/<span class="hljs-comment"># touch /.autorelabel</span><br></code></pre></td></tr></table></figure><h2 id="🐫-重启系统"><a href="#🐫-重启系统" class="headerlink" title="🐫 重启系统"></a>🐫 重启系统</h2><p>先<font color="\#DAA520">exit</font> 然后 reboot</p><img src="20210418101115940.png" alt="重启" style="zoom:100%;" /><p>重启后，即可用root账号和新设置的密码完成登录了</p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java类加载</title>
    <link href="/2022/10/04/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD/"/>
    <url>/2022/10/04/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<h2 id="🎅-引入"><a href="#🎅-引入" class="headerlink" title="🎅 引入"></a>🎅 引入</h2><p>思考如下代码段，会打印出<font color="\#DAA520">HungrySingleton init…</font>吗</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClazzLoadDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>Class&lt;ClazzLoadDemo&gt; clazz = ClazzLoadDemo.class;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HungrySingleton</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;HuangHao&quot;</span>;<br>    <br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;HungrySingleton init...&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">HungrySingleton</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HungrySingleton</span>();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">HungrySingleton</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> HungrySingleton <span class="hljs-title function_">getInstace</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们知道，当一个<font color="\#DAA520"> 类加载 </font>时，类中代码执行的优先级为</p><p class="note note-primary">    静态域代码块 > 构造代码块 > 构造方法</p><p>静态代码优先级这么高，竟然也未被执行，或许是说，我们的<font color="\#DAA520">HungrySingleton</font>类根本就未被加载</p><h2 id="📖-根源"><a href="#📖-根源" class="headerlink" title="📖 根源"></a>📖 根源</h2><p>可以触发类加载的条件有</p><ul><li><p class="note note-success">第一次new该类的对象</p></li><li><p class="note note-success">该类写在了main函数中</p></li><li><p class="note note-success">访问了该类的静态属性，方法</p></li></ul><h2 id="🎁-解决"><a href="#🎁-解决" class="headerlink" title="🎁 解决"></a>🎁 解决</h2><p>当我们访问该类的静态属性时，即把main函数中的代码改为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    System.out.println(HungrySingleton.name);<br>&#125;<br></code></pre></td></tr></table></figure><p>此时会打印出<font color="\#DAA520">HungrySingleton init…</font></p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaSE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java序列化版本号的作用</title>
    <link href="/2022/09/17/Java%E5%BA%8F%E5%88%97%E5%8C%96%E7%89%88%E6%9C%AC%E5%8F%B7%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
    <url>/2022/09/17/Java%E5%BA%8F%E5%88%97%E5%8C%96%E7%89%88%E6%9C%AC%E5%8F%B7%E7%9A%84%E4%BD%9C%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="😋-最前"><a href="#😋-最前" class="headerlink" title="😋 最前"></a>😋 最前</h2><p>实体类中常见到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br></code></pre></td></tr></table></figure><p>它表示Java序列化版本号</p><p>先简单解释两者的含义：</p><p class="note note-primary">    序列化：将Java对象转化为字节，然后进行网络传输或持久化到磁盘</p><p class='note note-secondary'>    反序列化：将本地或网络传输来的字节转化为Java对象</p><h2 id="⭐️-具体场景"><a href="#⭐️-具体场景" class="headerlink" title="⭐️ 具体场景"></a>⭐️ 具体场景</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> ** 用户实体类V1</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Character sex;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 写入磁盘</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">fin</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\code\\test.txt&quot;</span>);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">oin</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(fin);<br>        oin.writeObject(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;huanghao&quot;</span>));<br>        oin.close();<br>        fin.close();<br>        <br>        <span class="hljs-comment">// 读取磁盘</span><br>        <span class="hljs-type">OutpuStream</span> <span class="hljs-variable">fout</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;D:\\code\\test.txt&quot;</span>);<br>        <span class="hljs-type">ObjectOutpuStream</span> <span class="hljs-variable">oout</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutpuStream</span>(fout);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User)oout.readObject();<br>        System.out.println(user);<br>        oout.close();<br>        fout.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>看上去没问题，但假如User类升级，该类V1版本是三个属性字段（name，sex，age），V2版本时新增一个属性字段（salary），在V1版本时写入磁盘，在V2版本时读取磁盘，则会报InvalidClassException异常，就好比手中的旧船票已经登不上新客船。</p><h2 id="🌈-解决方案"><a href="#🌈-解决方案" class="headerlink" title="🌈 解决方案"></a>🌈 解决方案</h2><p>User类虽升级，但并不该影响序列化与反序列化（可理解为写入，升级后还能成功读出）。如何解决？引入版本号<strong>serialVersionUID</strong>即可。引入该类需要实现接口<strong>Serializable</strong>（本质是在告诉JDK该类要序列化）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> ** 用户实体类V2</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>&#123;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1234567890123456789L</span>;<br>    <br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Character sex;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Double salary;<br>&#125;<br></code></pre></td></tr></table></figure><p>（ps：IDEA有自动生成版本号的选项，自行百度）</p><h2 id="⛄️-更多"><a href="#⛄️-更多" class="headerlink" title="⛄️ 更多"></a>⛄️ 更多</h2><p>如果想在序列化时屏蔽某字段，可用<strong>transient</strong>关键字来修饰</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> Double salary;<br></code></pre></td></tr></table></figure><p>这样一来，salary虽然还在实体类中，但salary不会被写入到本地磁盘的文件中</p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaSE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java多线程经典API</title>
    <link href="/2022/09/16/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BB%8F%E5%85%B8API/"/>
    <url>/2022/09/16/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BB%8F%E5%85%B8API/</url>
    
    <content type="html"><![CDATA[<h2 id="👉-快速开始"><a href="#👉-快速开始" class="headerlink" title="👉 快速开始"></a>👉 快速开始</h2><p>最好的Java多线程API讲解点击此处：<a href="https://space.bilibili.com/51950540">多线程设计</a></p><h2 id="😆-思考"><a href="#😆-思考" class="headerlink" title="😆 思考"></a>😆 思考</h2><p>如果一个线程两次调用start()方法，会出现什么问题？</p><p class="note note-primary">    答：Java中一个线程只能调用一次start()方法，再次调用时会出现    <font color="\#DAA520">        IllegalThreadStateException    </font>    异常</p><h2 id="✨-拓展"><a href="#✨-拓展" class="headerlink" title="✨ 拓展"></a>✨ 拓展</h2><p>线程生命周期包括6中状态</p><p class="note note-primary">    1. NEW: 线程被创建，还没有调用start()启动</p><p class="note note-secondary">    2. RUNNABLE: 线程可能时正在运行，也可能是在就绪队列中等待操作系统进行调度分配CPU资源</p><p class="note note-success">    3. BLOCKED: 线程被锁，处于等待解锁状态</p><p class="note note-danger">    4. WAITTING: 线程等待状态，等待wait/notify条件唤醒</p><p class="note note-warning">    5. TIMED_WAIT: 和WAITTING状态相同，只是多了一个超时条件触发</p><p class="note note-info">    6. TERMINATED: 表示线程执行结束</p><p>当我们第一次调用start()方法时，线程状态可能处于<font color="\#DAA520">中止状态</font>或<font color="\#DAA520">非NEW状态下的一个其他状态</font>，再次调用start()方法就相当于让这个正在运行的线程再次运行一遍，这不合理，因此源码中在线程调用start()方法时都会先判断线程运行状态，若线程已经运行，则抛异常。</p><h2 id="🎠-更多"><a href="#🎠-更多" class="headerlink" title="🎠 更多"></a>🎠 更多</h2><p> Java线程生命周期状态图</p><pre><code class=" mermaid">stateDiagram-v2[*] --&gt; NEWNEW--&gt;RUNNABLE :start()RUNNABLE--&gt;WAITING :wait()WAITING--&gt;RUNNABLE :notify(),notifyAll()TIMED_WAITING--&gt;RUNNABLE :sleep()结束RUNNABLE--&gt;TIMED_WAITING :sleep()开始RUNNABLE--&gt;TERMINATED :run()结束TERMINATED --&gt; [*]BLOCKED--&gt;RUNNABLE :synchronized()RUNNABLE--&gt;BLOCKED :synchronized()</code></pre><p>ps: Java线程周期中没有Running状态，Ready和Running状态被统一归纳入<font color="\#DAA520">RUNNABLE</font>中</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式</title>
    <link href="/2022/09/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/09/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>点击这里跳转：<a href="https://www.bilibili.com/video/BV1b5411a7oa?spm_id_from=333.999.0.0">bilibiliTV</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaSE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo使用指南</title>
    <link href="/2022/09/16/hello-world/"/>
    <url>/2022/09/16/hello-world/</url>
    
    <content type="html"><![CDATA[<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>如果您还未开始Hexo的搭建，请参考此教程：<a href="https://www.bilibili.com/video/BV1mU4y1j72n?p=1">Hexo+Github保姆级教程</a></p><h2 id="创建新文档"><a href="#创建新文档" class="headerlink" title="创建新文档"></a>创建新文档</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>更多信息： <a href="https://hexo.io/docs/writing.html">该如何写</a></p><h2 id="清除本地缓存"><a href="#清除本地缓存" class="headerlink" title="清除本地缓存"></a>清除本地缓存</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo cl<br></code></pre></td></tr></table></figure><h2 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo g<br></code></pre></td></tr></table></figure><h2 id="本地运行测试"><a href="#本地运行测试" class="headerlink" title="本地运行测试"></a>本地运行测试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo s<br></code></pre></td></tr></table></figure><p>测试： <a href="http://localhost:4000/">点击此处</a></p><p>更多信息： <a href="https://hexo.io/docs/server.html">服务端</a></p><h2 id="发布至远端"><a href="#发布至远端" class="headerlink" title="发布至远端"></a>发布至远端</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo d<br></code></pre></td></tr></table></figure><p>更多信息： <a href="https://hexo.io/docs/one-command-deployment.html">如何发布</a></p><h2 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo cl &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
